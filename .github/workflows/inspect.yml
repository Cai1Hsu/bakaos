name: Code Quality

permissions:
  contents: read

on:
  push:
    branches: ["master"]
  pull_request:

env:
  CARGO_TERM_COLOR: "always"

jobs:
  line-ending:
    name: Line Ending
    runs-on: ubuntu-latest
    steps:
      - name: Disable Git Line Ending Conversion
        run: git config --global core.autocrlf false

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Line Ending
        shell: bash
        run: |
          set -euo pipefail

          # LICENSE should be excluded
          rm LICENSE

          FILE=$(mktemp)
          # Only check tracked text files; exclude LICENSE explicitly.
          git ls-files -z \
            | xargs -0 -I{} file --mime "{}" \
            | grep -vE '/LICENSE:' \
            | grep -E ':.*(charset=us-ascii|charset=utf-8)' \
            | cut -d: -f1 \
            | xargs -I{} file "{}" \
            | grep -F 'CRLF' \
            | tee "$FILE" || true

          if [[ -s "$FILE" ]]; then
            echo "::error::CRLF line endings found:"
            cat "$FILE"
            exit 1
          fi

  inspect:
    name: Inspect
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - { prettyname: Cross Platform, cwd: '.' }
          - { prettyname: RISC-V64, triplet: riscv64gc-unknown-none-elf, cwd: 'kernel' }
          - { prettyname: LoongArch64, triplet: loongarch64-unknown-none, cwd: 'kernel' }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/workflows/actions/setup-rust
        with:
          target: ${{ matrix.target.triplet }}
          components: "clippy,rustfmt"

      - name: Remove rust-toolchain.toml
        shell: bash
        run: rm rust-toolchain.toml

      # This is a workaround to make kernel compile without building a user program.
      - name: Apply workaround
        shell: bash
        run: |
          cd hello-world
          touch hello-la
          touch hello-rv

      - name: Generate Cargo target Argument
        shell: bash
        run: |
          if [ -n "${{ matrix.target.triplet }}" ]; then
            TARGET="--target ${{ matrix.target.triplet }}"
          else
            TARGET="--all-targets"
          fi

          echo "TARGET=$TARGET" >> $GITHUB_ENV

      # Some of the libraries requires source generation
      # We have to compile them so that the required code are generated
      - name: Compile
        working-directory: ${{ matrix.target.cwd }}
        run: cargo build ${{ env.TARGET }}

      - name: Inspect
        id: inspect
        working-directory: ${{ matrix.target.cwd }}
        run: cargo fmt --all --check

      - name: Lint
        id: lint
        working-directory: ${{ matrix.target.cwd }}
        if: ${{ success() || failure() }}
        run: cargo clippy ${{ env.TARGET }} -- -D warnings

      - name: Conclude
        if: ${{ always() }}
        shell: bash
        run: |
          failed=0

          if [[ "${{ steps.inspect.outcome }}" == "failure" ]]; then
            echo "Inspect failed"
            failed=1
          fi

          if [[ "${{ steps.lint.outcome }}" == "failure" ]]; then
            echo "Lint failed"
            failed=1
          fi

          exit $failed
