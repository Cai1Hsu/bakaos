name: Final test

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: 'always'
  IS_CI_ENVIRONMENT: true

jobs:
  run:
    name: Grading
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - { triplet: riscv64gc-unknown-none-elf, fullname: riscv64, shortname: rv }
#          - { triplet: loongarch64-unknown-none, fullname: loongarch64, shortname: la }

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        env: 
            TOOLCHAIN_VERSION: nightly-2025-01-18
        run: |
          rustup toolchain install $TOOLCHAIN_VERSION --profile minimal
          rustup default $TOOLCHAIN_VERSION
          rustup override set $TOOLCHAIN_VERSION
          rustup target add ${{ matrix.architecture.triplet }}
          rustup component add llvm-tools

      - uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-binutils

      - uses: ./.github/workflows/actions/setup-musl

      - name: Build Kernel
        run: |
          make build-final ARCH=${{ matrix.architecture.fullname }}
          make _prepare_image ARCH=${{ matrix.architecture.fullname }}
      
      - uses: ./.github/workflows/actions/setup-qemu

      - name: Download sdcard images
        run: |
          # We have to download the file at the parent directory(the root of this repository)
          wget https://github.com/neuq-rcore/testsuits-for-oskernel/releases/download/2025-pre/sdcard-${{ matrix.architecture.shortname }}.img.zst
          make _prepare_sdcard ARCH=${{ matrix.architecture.fullname }}

      - name: Run tests
        timeout-minutes: 5 # A temporary value
        run: make _test_internal ARCH=${{ matrix.architecture.fullname }}

      - uses: actions/upload-artifact@v4
        with:
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          name: output-${{ matrix.architecture.fullname }}.log
          path: output.log
          if-no-files-found: error
          compression-level: 0
          overwrite: true

      # Unnecessary, .NET is contained in GitHub Actions
      # - uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: '8.0.x'

      - name: Visualizing Test results
        run: make parse

      - name: Create annotation comment
        if: ${{ matrix.architecture.fullname }} == 'riscv64'
        run: dotnet run --project KernelAnnotationBot -- -f=output.log -b=results.json --target=${{ matrix.architecture.fullname }} --profile=release --log-level=OFF --title="# **Final** Test result annotation" --crash-threshold=370
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
