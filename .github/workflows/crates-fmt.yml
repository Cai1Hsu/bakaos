name: Crates Code Quality

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: 'always'

jobs:
  lint:
    name: Code Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture: [riscv64gc-unknown-none-elf, loongarch64-unknown-none]
        multi-features-crates: [drivers]

    defaults:
      run:
        working-directory: ./crates

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        env: 
            TOOLCHAIN_VERSION: nightly-2025-01-18
        run: |
          rustup toolchain install $TOOLCHAIN_VERSION --profile minimal
          rustup default $TOOLCHAIN_VERSION
          rustup override set $TOOLCHAIN_VERSION
          rustup target add ${{ matrix.architecture }}
          rustup component add clippy

      - uses: ./.github/workflows/actions/setup-musl

      - name: Run clippy
        run: cargo clippy --target ${{ matrix.architecture }} -- -D warnings

      # driver crate has many features to support different platform
      - name: Clippy driver
        run: cargo clippy --target ${{ matrix.architecture }} --all-features --manifest-path=${{ matrix.multi-features-crates }}/Cargo.toml -- -D warnings

  fmt:
    name: Code Format
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./crates

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        env: 
            TOOLCHAIN_VERSION: nightly-2025-01-18
        run: |
          rustup toolchain install $TOOLCHAIN_VERSION --profile minimal
          rustup default $TOOLCHAIN_VERSION
          rustup override set $TOOLCHAIN_VERSION
          rustup component add rustfmt

      - uses: ./.github/workflows/actions/setup-musl

      - name: Build Crates
        # Some crates requires build artifacts to be present before running fmt
        run: cargo build -p constants

      - name: Check formatting
        run: cargo fmt -- --check
